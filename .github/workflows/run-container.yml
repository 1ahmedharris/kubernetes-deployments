name: Deploy to EKS

on:
  push:
    branches: main


jobs:
  upload-image:
    runs-on: ubuntu-latest
    steps:
    # Step 1: Check out repository code
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Configure AWS security credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Step 3: Login to AWS ECR
    - name: Login to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # Step 4: Build, tag, then push Docker image to AWS ECR
    - name: Build, tag, and push image to AWS ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: latest             
      run: |
        cd flask-app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

        
  deploy:
    name: Deployment
    runs-on: ubuntu-latest

    steps:
    # Step 1: Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    # Step 2: Update Kube config
    - name: Update kube config
      run: aws eks update-kubeconfig --name new-cluster --region us-east-1
      
    # Deploy app to AWS EKS
    - name: Deploy to EKS 
      run: |
        kubectl apply -f deployments.yaml 
        
